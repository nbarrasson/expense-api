name: Deploy Expense API
on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy-appservice:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Create Resource Group
      - name: Create Resource Group
        id: resourcegroup
        uses: azure/arm-deploy@v1
        with:
          scope: subscription
          region: ${{ secrets.AZURE_LOCATION }}
          template: ./deploy/resourcegroup.bicep
          parameters: location=${{ secrets.AZURE_LOCATION }} name=${{ secrets.AZURE_RESOURCEGROUP }}

      # Deploy App Service
      - name: Deploy App Service
        id: appservice
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ secrets.AZURE_RESOURCEGROUP }}
          template: ./deploy/appservice.bicep
          parameters: location=${{ secrets.AZURE_LOCATION }}

  # Deploy the API on App Service
  deploy-api:
    runs-on: ubuntu-latest
    needs: [deploy-appservice]
    env:
      AZURE_WEBAPP_NAME: ${{ steps.appservice.outputs.webSiteName }}
      AZURE_WEBAPP_PACKAGE_PATH: '.'
      DOTNET_VERSION: '6.0.x'

    steps:
      - uses: actions/checkout@main
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
           
      # Setup .NET Core SDK
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }} 
      
      # Run dotnet build and publish
      - name: dotnet build and publish
        run: |
          dotnet restore
          dotnet build --configuration Release
          dotnet publish -c Release -o '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}' 
          
      # Deploy to Azure Web apps
      - name: 'Run Azure webapp deploy action using publish profile credentials'
        uses: azure/webapps-deploy@v2
        with: 
          app-name: ${{ env.AZURE_WEBAPP_NAME }} 
          package: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}'
      
      - name: logout
        run: |
          az logout

  # Deploy APIM and resgister the API contract
  deploy-apim:
    runs-on: ubuntu-latest
    needs: [deploy-api]
    steps:
      - uses: actions/checkout@main
      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy APIM
        id: apim
        uses: azure/arm-deploy@v1
        with:
          resourceGroupName: ${{ secrets.AZURE_RESOURCEGROUP }}
          template: ./deploy/apim.bicep
          parameters: publisherEmail=${{ secrets.APIM_ADMIN_EMAIL }} publisherName=${{ secrets.APIM_COMPANY_NAME }} location=${{ secrets.AZURE_LOCATION }} serviceUrl='https://${{ steps.appservice.outputs.webSiteName }}.azurewebsites.net/swagger/v1/swagger.json'

  # Scan the API deployed on APIM
  scan-api:
    runs-on: ubuntu-latest
    needs: [deploy-apim]
    steps:      
      - name: ZAP Scan the API
        uses: zaproxy/action-api-scan@v0.1.0
        with:
          format: openapi
          target: 'https://${{ steps.apim.outputs.swagger_endpoint }}'